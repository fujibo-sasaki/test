"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bent";
exports.ids = ["vendor-chunks/bent"];
exports.modules = {

/***/ "(ssr)/./node_modules/bent/src/core.js":
/*!***************************************!*\
  !*** ./node_modules/bent/src/core.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmVudC9zcmMvY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxJQUFJLG1CQUFtQixPQUFPO0FBQzNFO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDViwrQ0FBK0MsSUFBSTtBQUNuRDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTix1Q0FBdUMsV0FBVztBQUNsRDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJlLW9wZW4tYWktYWNjZWxlcmF0b3IvLi9ub2RlX21vZHVsZXMvYmVudC9zcmMvY29yZS5qcz9hMGE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgZW5jb2RpbmdzID0gbmV3IFNldChbJ2pzb24nLCAnYnVmZmVyJywgJ3N0cmluZyddKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1rcmVxdWVzdCA9PiAoLi4uYXJncykgPT4ge1xuICBjb25zdCBzdGF0dXNDb2RlcyA9IG5ldyBTZXQoKVxuICBsZXQgbWV0aG9kXG4gIGxldCBlbmNvZGluZ1xuICBsZXQgaGVhZGVyc1xuICBsZXQgYmFzZXVybCA9ICcnXG5cbiAgYXJncy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoYXJnLnRvVXBwZXJDYXNlKCkgPT09IGFyZykge1xuICAgICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgICAgY29uc3QgbXNnID0gYENhbid0IHNldCBtZXRob2QgdG8gJHthcmd9LCBhbHJlYWR5IHNldCB0byAke21ldGhvZH0uYFxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0aG9kID0gYXJnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXJnLnN0YXJ0c1dpdGgoJ2h0dHA6JykgfHwgYXJnLnN0YXJ0c1dpdGgoJ2h0dHBzOicpKSB7XG4gICAgICAgIGJhc2V1cmwgPSBhcmdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbmNvZGluZ3MuaGFzKGFyZykpIHtcbiAgICAgICAgICBlbmNvZGluZyA9IGFyZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBlbmNvZGluZywgJHthcmd9YClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN0YXR1c0NvZGVzLmFkZChhcmcpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSB8fCBhcmcgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgYXJnLmZvckVhY2goY29kZSA9PiBzdGF0dXNDb2Rlcy5hZGQoY29kZSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaGVhZGVycykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNldCBoZWFkZXJzIHR3aWNlLicpXG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVycyA9IGFyZ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlb2YgYXJnfWApXG4gICAgfVxuICB9KVxuXG4gIGlmICghbWV0aG9kKSBtZXRob2QgPSAnR0VUJ1xuICBpZiAoc3RhdHVzQ29kZXMuc2l6ZSA9PT0gMCkge1xuICAgIHN0YXR1c0NvZGVzLmFkZCgyMDApXG4gIH1cblxuICByZXR1cm4gbWtyZXF1ZXN0KHN0YXR1c0NvZGVzLCBtZXRob2QsIGVuY29kaW5nLCBoZWFkZXJzLCBiYXNldXJsKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bent/src/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bent/src/nodejs.js":
/*!*****************************************!*\
  !*** ./node_modules/bent/src/nodejs.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\")\nconst https = __webpack_require__(/*! https */ \"https\")\nconst { URL } = __webpack_require__(/*! url */ \"url\")\nconst isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\")\nconst caseless = __webpack_require__(/*! caseless */ \"(ssr)/./node_modules/caseless/index.js\")\nconst bytes = __webpack_require__(/*! bytesish */ \"(ssr)/./node_modules/bytesish/node.js\")\nconst bent = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/bent/src/core.js\")\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\")\nconst { PassThrough } = __webpack_require__(/*! stream */ \"stream\")\n\nconst compression = {}\n\n/* istanbul ignore else */\nif (zlib.createBrotliDecompress) compression.br = () => zlib.createBrotliDecompress()\n/* istanbul ignore else */\nif (zlib.createGunzip) compression.gzip = () => zlib.createGunzip()\n/* istanbul ignore else */\nif (zlib.createInflate) compression.deflate = () => zlib.createInflate()\n\nconst acceptEncoding = Object.keys(compression).join(', ')\n\nconst getResponse = resp => {\n  const ret = new PassThrough()\n  ret.statusCode = resp.statusCode\n  ret.status = resp.statusCode\n  ret.statusMessage = resp.statusMessage\n  ret.headers = resp.headers\n  ret._response = resp\n  if (ret.headers['content-encoding']) {\n    const encodings = ret.headers['content-encoding'].split(', ').reverse()\n    while (encodings.length) {\n      const enc = encodings.shift()\n      if (compression[enc]) {\n        const decompress = compression[enc]()\n        decompress.on('error', (e) => ret.emit('error', new Error('ZBufError', e)))\n        resp = resp.pipe(decompress)\n      } else {\n        break\n      }\n    }\n  }\n  return resp.pipe(ret)\n}\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    Error.captureStackTrace(this, StatusError)\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.statusCode\n    this.json = res.json\n    this.text = res.text\n    this.arrayBuffer = res.arrayBuffer\n    this.headers = res.headers\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n  }\n}\n\nconst getBuffer = stream => new Promise((resolve, reject) => {\n  const parts = []\n  stream.on('error', reject)\n  stream.on('end', () => resolve(Buffer.concat(parts)))\n  stream.on('data', d => parts.push(d))\n})\n\nconst decodings = res => {\n  let _buffer\n  res.arrayBuffer = () => {\n    if (!_buffer) {\n      _buffer = getBuffer(res)\n      return _buffer\n    } else {\n      throw new Error('body stream is locked')\n    }\n  }\n  res.text = () => res.arrayBuffer().then(buff => buff.toString())\n  res.json = async () => {\n    const str = await res.text()\n    try {\n      return JSON.parse(str)\n    } catch (e) {\n      e.message += `str\"${str}\"`\n      throw e\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => (_url, body = null, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  const parsed = new URL(_url)\n  let h\n  if (parsed.protocol === 'https:') {\n    h = https\n  } else if (parsed.protocol === 'http:') {\n    h = http\n  } else {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n  const request = {\n    path: parsed.pathname + parsed.search,\n    port: parsed.port,\n    method: method,\n    headers: { ...(headers || {}), ..._headers },\n    hostname: parsed.hostname\n  }\n  if (parsed.username || parsed.password) {\n    request.auth = [parsed.username, parsed.password].join(':')\n  }\n  const c = caseless(request.headers)\n  if (encoding === 'json') {\n    if (!c.get('accept')) {\n      c.set('accept', 'application/json')\n    }\n  }\n  if (!c.has('accept-encoding')) {\n    c.set('accept-encoding', acceptEncoding)\n  }\n  return new Promise((resolve, reject) => {\n    const req = h.request(request, async res => {\n      res = getResponse(res)\n      res.on('error', reject)\n      decodings(res)\n      res.status = res.statusCode\n      if (!statusCodes.has(res.statusCode)) {\n        return reject(new StatusError(res))\n      }\n\n      if (!encoding) return resolve(res)\n      else {\n        /* istanbul ignore else */\n        if (encoding === 'buffer') {\n          resolve(res.arrayBuffer())\n        } else if (encoding === 'json') {\n          resolve(res.json())\n        } else if (encoding === 'string') {\n          resolve(res.text())\n        }\n      }\n    })\n    req.on('error', reject)\n    if (body) {\n      if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n        body = bytes.native(body)\n      }\n      if (Buffer.isBuffer(body)) {\n        // noop\n      } else if (typeof body === 'string') {\n        body = Buffer.from(body)\n      } else if (isStream(body)) {\n        body.pipe(req)\n        body = null\n      } else if (typeof body === 'object') {\n        if (!c.has('content-type')) {\n          req.setHeader('content-type', 'application/json')\n        }\n        body = Buffer.from(JSON.stringify(body))\n      } else {\n        reject(new Error('Unknown body type.'))\n      }\n      if (body) {\n        req.setHeader('content-length', body.length)\n        req.end(body)\n      }\n    } else {\n      req.end()\n    }\n  })\n}\n\nmodule.exports = bent(mkrequest)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bent/src/nodejs.js\n");

/***/ })

};
;